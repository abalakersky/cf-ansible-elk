---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create VPC with 1 subnet and single Ubuntu 16.04 instance with Ansible'
Parameters:
  InstanceType:
    Description: Ansible EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: " The IP address range that can be used to SSH to the EC2 instances"
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  BucketURL:
    Description: An http URL to S3 bucket containing bootstraps to use. Make sure the bucket has proper Policy applied.
    Default: http://s3.amazonaws.com/MyBucket
    Type: String
    MinLength: '8'
    MaxLength: '128'
Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      '64': ami-40d28157
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.27.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Name
        Value: 'AnsibleELK-VPC'
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.16.27.0/24
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Name
        Value: 'AnsibleELK-Subnet'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Name
        Value: 'AnsibleELK-IGW'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Name
        Value: 'AnsibleELK-Route'
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Name
        Value: 'AnsibleELK-NACL'
  PrivateInboundNetworkAclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref SSHLocation
  PrivateOutboundNetworkAclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Ref SSHLocation
  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  IPAddress:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref AnsibleServerInstance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
  AnsibleServerInstance:
    Type: AWS::EC2::Instance
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', '64']
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Name
        Value: 'AnsibleELK-ansible'
      NetworkInterfaces:
      - GroupSet:
        - Ref: InstanceSecurityGroup
        AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        DeleteOnTermination: 'true'
        SubnetId: !Ref Subnet
      UserData:
        Fn::Base64: !Sub |
              #!/bin/bash -xe
              service ufw stop
              apt-get update
              apt-get install python-pycurl software-properties-common python-pip -y
              apt-add-repository ppa:ansible/ansible
              apt-get update
              apt-get install ansible -y
              pip install boto awscli
              aws configure set region us-east-1
              export INTERFACE=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/)
              export SUBNET_ID=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$INTERFACE/subnet-id)
              export VPC_ID=$(curl --silent http://169.254.169.254/latest/meta-data/network/interfaces/macs/$INTERFACE/vpc-id)
              export ANSIBLE_HOST_KEY_CHECKING=False
              wget -O /root/ec2_create.yml ${BucketURL}/ec2_create.yml
              wget -O /root/elk_install.yml ${BucketURL}/elk_install.yml
              wget -O /root/vaultp.txt ${BucketURL}/vaultp.txt
              echo -en "[local]\nlocalhost\n\n[elk]\n" > /root/hosts
              ansible-playbook -i localhost, /root/ec2_create.yml -e subnet_id=$SUBNET_ID -e vpc_id=$VPC_ID --vault-password-file /root/vaultp.txt
              ansible-playbook -i /root/hosts /root/elk_install.yml --private-key /root/.ssh/elkserverkey.pem
Outputs:
  AnsibleIP:
    Value:
      Fn::GetAtt:
      - AnsibleServerInstance
      - PublicIp
    Description: Newly created application URL
